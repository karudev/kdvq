<?php

namespace Sf\AdminBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Translatable\Translatable;
use Symfony\Component\Filesystem\Filesystem;
use Sf\AdminBundle\Service\FileManager;

/**
 * Brand
 *
 * @ORM\Table(name="brand")
 * @ORM\Entity(repositoryClass="Sf\AdminBundle\Entity\BrandRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Brand implements Translatable
{

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

     /**
     * @var string
     * @ORM\Column(name="reference", type="string", length=4)
     */
    private $reference;
    
    /**
     * @var string
     * @Gedmo\Translatable
     * @ORM\Column(name="name", type="string", length=128)
     */
    private $name;
    
   

    /**
     * @var string
     * @Gedmo\Translatable
     * @ORM\Column(name="subtitle", type="string", length=128, nullable=true)
     */
    private $subTitle;

    /**
     *
     * @Assert\Image(maxSize="6000000")
     */
    private $illustrativePicture;

    /**
     * @var string
     *
     * @ORM\Column(name="illustrative_picture_url", type="string", length=128, nullable=true)
     */
    private $illustrativePictureUrl;

    /**
     *
     * @Assert\Image(maxSize="6000000")
     */
    private $iconLegend;

    /**
     * @var string
     *
     * @ORM\Column(name="icon_legend_url", type="string", length=128, nullable=true)
     */
    private $iconLegendUrl;

    /**
     *
     * @Assert\Image(maxSize="6000000")
     */
    private $logo;

    /**
     * @var string
     *
     * @ORM\Column(name="logo_url", type="string", length=128, nullable=true)
     */
    private $logoUrl;

    /**
     * @var string
     * @Gedmo\Translatable
     * @Gedmo\Slug(fields={"name"})
     * @ORM\Column(name="slug", unique=true, length=255)
     */
    private $slug;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime")
     */
    private $createdAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="updated_at", type="datetime")
     */
    private $updatedAt;
    
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="deleted_at", type="datetime", nullable = true)
     */
    private $deletedAt;

      /**
     *
     *  @ORM\ManyToMany(targetEntity="Creator", cascade={"persist"})

     */
    private $brandCreators;
    
     /**
     * @var boolean
     * @ORM\Column(name="active", type="boolean")
     */
    private $active = true;
    
     /**
     * @var boolean
     * @ORM\Column(name="allow_filter", type="boolean")
     */
    private $allowFilter = true;
    
    /**
     * @var boolean
     * @ORM\Column(name="deleted", type="boolean")
     */
    private $deleted = false;

    /**
     *
     *  @ORM\OneToMany(targetEntity="Group", mappedBy="brand" )
     */
    private $groups;
    
     /**
     * @var string
     * @ORM\Column(name="tva_percent", type="float", nullable = true)
     */
    private $tvaPercent;
    
    /**
     * @var float
     * @ORM\Column(name="shipping_btotb", type="float")
     */
    private $shippingBtoB = 0;
    
    /**
     * @var string
     * @ORM\Column(name="shipping_unit_btotb", type="string")
     */
    private $shippingUnitBtoB = '€';
    
    /**
     * @var float
     * @ORM\Column(name="min_order_btotb", type="float")
     */
    private $minOrderBtoB = 0;
    
 
    
     /**
     * @var float
     * @ORM\Column(name="carriage_btotb", type="float")
     */
    private $carriageBtoB = 0;
    

    
    /**
     * @var float
     * @ORM\Column(name="shipping_btotc", type="float")
     */
    private $shippingBtoC = 0;
    
    /**
     * @var string
     * @ORM\Column(name="shipping_unit_btotc", type="string")
     */
    private $shippingUnitBtoC = '€';
    
    /**
     * @var float
     * @ORM\Column(name="min_order_btotc", type="float")
     */
    private $minOrderBtoC = 0;
    
   
     /**
     * @var float
     * @ORM\Column(name="carriage_btotc", type="float")
     */
    private $carriageBtoC = 0;
    
    
    /**
     * @var string
     * @ORM\Column(name="email", type="string", length=128)
     */
    private $email;
    
    /**
     * @var string
     * @ORM\Column(name="lang", type="string", length=2)
     */
    private $lang;
    
    /**
     * @var boolean
     * @ORM\Column(name="is_in_catalog", type="boolean")
     */
    private $isInCatalog = true;
    
  
    
     

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Brand
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set subTitle
     *
     * @param string $subTitle
     * @return Brand
     */
    public function setSubTitle($subTitle)
    {
        $this->subTitle = $subTitle;

        return $this;
    }

    /**
     * Get subTitle
     *
     * @return string 
     */
    public function getSubTitle()
    {
        return $this->subTitle;
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return Brand
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string 
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Brand
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return Brand
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime 
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set illustrativePicture
     *
     * @param object $illustrativePicture
     */
    public function setIllustrativePicture($illustrativePicture)
    {
        $this->illustrativePicture = $illustrativePicture;
    }

    /**
     * Get illustrativePicture
     *
     * @return object
     */
    public function getIllustrativePicture()
    {
        return $this->illustrativePicture;
    }

    /**
     * Set logo
     *
     * @param object $logo
     */
    public function setLogo($logo)
    {
        $this->logo = $logo;
    }

    /**
     * Get logo
     *
     * @return object
     */
    public function getLogo()
    {
        return $this->logo;
    }

    /**
     * Set iconLegend
     *
     * @param object $iconLegend
     */
    public function setIconLegend($iconLegend)
    {
        $this->iconLegend = $iconLegend;
    }

    /**
     * Get iconLegend
     *
     * @return object
     */
    public function getIconLegend()
    {
        return $this->iconLegend;
    }

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preUpload()
    {
        if (null !== $this->logo) {
            $this->logoUrl = uniqid() . '.' . $this->logo->guessExtension();
        }
        if (null !== $this->iconLegend) {
            $this->iconLegendUrl = uniqid() . '.' . $this->iconLegend->guessExtension();
        }
        if (null !== $this->illustrativePicture) {
            $this->illustrativePictureUrl = uniqid() . '.' . $this->illustrativePicture->guessExtension();
        }
    }

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {   
        if ($this->logo != null) {
            $ext = $this->logo->guessExtension();
            $this->logo->move($this->getUploadRootDir(), $this->logoUrl);
            FileManager::resize($this->getUploadRootDir().'/'.$this->logoUrl,$ext, 80);
            unset($this->logo);
        }
        if ($this->iconLegend != null) {
            $this->iconLegend->move($this->getUploadRootDir(), $this->iconLegendUrl);
            unset($this->iconLegend);
        }
        if ($this->illustrativePicture != null) {
            $this->illustrativePicture->move($this->getUploadRootDir(), $this->illustrativePictureUrl);
            unset($this->illustrativePicture);
        }
    }

    /**
     * @ORM\PostRemove()
     */
    public function removeUpload()
    {

        $fs = new Filesystem();
        if ($fs->exists($this->getAbsolutePath($this->logoUrl))) {
            unlink($this->logo);
        }
        if ($fs->exists($this->getAbsolutePath($this->iconLegendUrl))) {
            unlink($this->iconLegend);
        }
        if ($fs->exists($this->getAbsolutePath($this->illustrativePictureUrl))) {
         
            unlink($this->illustrativePicture);
        }
    }

    public function getAbsolutePath($file)
    {
        return $this->getUploadRootDir() . '/' . $file;
    }

    /* public function getWebPath()
      {
      return $this->getUploadDir().'/'.$this->backgroundUrl;
      } */

    protected function getUploadRootDir()
    {
        return __DIR__ . '/../../../../web/' . $this->getUploadDir();
    }

    protected function getUploadDir()
    {
        return 'uploads/brands';
    }


    /**
     * Set illustrativePictureUrl
     *
     * @param string $illustrativePictureUrl
     * @return Brand
     */
    public function setIllustrativePictureUrl($illustrativePictureUrl)
    {
        $this->illustrativePictureUrl = $illustrativePictureUrl;

        return $this;
    }

    /**
     * Get illustrativePictureUrl
     *
     * @return string 
     */
    public function getIllustrativePictureUrl()
    {
        return $this->illustrativePictureUrl;
    }

    /**
     * Set iconLegendUrl
     *
     * @param string $iconLegendUrl
     * @return Brand
     */
    public function setIconLegendUrl($iconLegendUrl)
    {
        $this->iconLegendUrl = $iconLegendUrl;

        return $this;
    }

    /**
     * Get iconLegendUrl
     *
     * @return string 
     */
    public function getIconLegendUrl()
    {
        return $this->iconLegendUrl;
    }

    /**
     * Set logoUrl
     *
     * @param string $logoUrl
     * @return Brand
     */
    public function setLogoUrl($logoUrl)
    {
        $this->logoUrl = $logoUrl;

        return $this;
    }

    /**
     * Get logoUrl
     *
     * @return string 
     */
    public function getLogoUrl()
    {
        return $this->logoUrl;
    }

   
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->creators = new \Doctrine\Common\Collections\ArrayCollection();
    }

    

    /**
     * Set active
     *
     * @param boolean $active
     * @return Brand
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean 
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Set allowFilter
     *
     * @param boolean $allowFilter
     * @return Brand
     */
    public function setAllowFilter($allowFilter)
    {
        $this->allowFilter = $allowFilter;

        return $this;
    }

    /**
     * Get allowFilter
     *
     * @return boolean 
     */
    public function getAllowFilter()
    {
        return $this->allowFilter;
    }

    /**
     * Set deletedAt
     *
     * @param \DateTime $deletedAt
     * @return Brand
     */
    public function setDeletedAt($deletedAt)
    {
        $this->deletedAt = $deletedAt;

        return $this;
    }

    /**
     * Get deletedAt
     *
     * @return \DateTime 
     */
    public function getDeletedAt()
    {
        return $this->deletedAt;
    }

    /**
     * Set deleted
     *
     * @param boolean $deleted
     * @return Brand
     */
    public function setDeleted($deleted)
    {
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * Get deleted
     *
     * @return boolean 
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * Add groups
     *
     * @param \Sf\AdminBundle\Entity\Group $groups
     * @return Brand
     */
    public function addGroup(\Sf\AdminBundle\Entity\Group $groups)
    {
        $this->groups[] = $groups;

        return $this;
    }

    /**
     * Remove groups
     *
     * @param \Sf\AdminBundle\Entity\Group $groups
     */
    public function removeGroup(\Sf\AdminBundle\Entity\Group $groups)
    {
        $this->groups->removeElement($groups);
    }

    /**
     * Get groups
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getGroups()
    {
        return $this->groups;
    }

    /**
     * Add brandCreators
     *
     * @param \Sf\AdminBundle\Entity\Creator $brandCreators
     * @return Brand
     */
    public function addBrandCreator(\Sf\AdminBundle\Entity\Creator $brandCreators)
    {
        $this->brandCreators[] = $brandCreators;

        return $this;
    }

    /**
     * Remove brandCreators
     *
     * @param \Sf\AdminBundle\Entity\Creator $brandCreators
     */
    public function removeBrandCreator(\Sf\AdminBundle\Entity\Creator $brandCreators)
    {
        $this->brandCreators->removeElement($brandCreators);
    }

    /**
     * Get brandCreators
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getBrandCreators()
    {
        return $this->brandCreators;
    }

    /**
     * Set reference
     *
     * @param string $reference
     * @return Brand
     */
    public function setReference($reference)
    {
        $this->reference = strtoupper($reference);

        return $this;
    }

    /**
     * Get reference
     *
     * @return string 
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Set tvaPercent
     *
     * @param float $tvaPercent
     * @return Brand
     */
    public function setTvaPercent($tvaPercent)
    {
        $this->tvaPercent = $tvaPercent;

        return $this;
    }

    /**
     * Get tvaPercent
     *
     * @return float 
     */
    public function getTvaPercent()
    {
        return $this->tvaPercent;
    }

    /**
     * Set shippingBtoB
     *
     * @param float $shippingBtoB
     * @return Brand
     */
    public function setShippingBtoB($shippingBtoB)
    {
        $this->shippingBtoB = $shippingBtoB;

        return $this;
    }

    /**
     * Get shippingBtoB
     *
     * @return float 
     */
    public function getShippingBtoB()
    {
        return $this->shippingBtoB;
    }

    /**
     * Set shippingUnitBtoB
     *
     * @param string $shippingUnitBtoB
     * @return Brand
     */
    public function setShippingUnitBtoB($shippingUnitBtoB)
    {
        $this->shippingUnitBtoB = $shippingUnitBtoB;

        return $this;
    }

    /**
     * Get shippingUnitBtoB
     *
     * @return string 
     */
    public function getShippingUnitBtoB()
    {
        return $this->shippingUnitBtoB;
    }

    /**
     * Set minOrderBtoB
     *
     * @param float $minOrderBtoB
     * @return Brand
     */
    public function setMinOrderBtoB($minOrderBtoB)
    {
        $this->minOrderBtoB = $minOrderBtoB;

        return $this;
    }

    /**
     * Get minOrderBtoB
     *
     * @return float 
     */
    public function getMinOrderBtoB()
    {
        return $this->minOrderBtoB;
    }

   

    /**
     * Set carriageBtoB
     *
     * @param float $carriageBtoB
     * @return Brand
     */
    public function setCarriageBtoB($carriageBtoB)
    {
        $this->carriageBtoB = $carriageBtoB;

        return $this;
    }

    /**
     * Get carriageBtoB
     *
     * @return float 
     */
    public function getCarriageBtoB()
    {
        return $this->carriageBtoB;
    }

  

    /**
     * Set shippingBtoC
     *
     * @param float $shippingBtoC
     * @return Brand
     */
    public function setShippingBtoC($shippingBtoC)
    {
        $this->shippingBtoC = $shippingBtoC;

        return $this;
    }

    /**
     * Get shippingBtoC
     *
     * @return float 
     */
    public function getShippingBtoC()
    {
        return $this->shippingBtoC;
    }

    /**
     * Set shippingUnitBtoC
     *
     * @param string $shippingUnitBtoC
     * @return Brand
     */
    public function setShippingUnitBtoC($shippingUnitBtoC)
    {
        $this->shippingUnitBtoC = $shippingUnitBtoC;

        return $this;
    }

    /**
     * Get shippingUnitBtoC
     *
     * @return string 
     */
    public function getShippingUnitBtoC()
    {
        return $this->shippingUnitBtoC;
    }

    /**
     * Set minOrderBtoC
     *
     * @param float $minOrderBtoC
     * @return Brand
     */
    public function setMinOrderBtoC($minOrderBtoC)
    {
        $this->minOrderBtoC = $minOrderBtoC;

        return $this;
    }

    /**
     * Get minOrderBtoC
     *
     * @return float 
     */
    public function getMinOrderBtoC()
    {
        return $this->minOrderBtoC;
    }

    

    /**
     * Set carriageBtoC
     *
     * @param float $carriageBtoC
     * @return Brand
     */
    public function setCarriageBtoC($carriageBtoC)
    {
        $this->carriageBtoC = $carriageBtoC;

        return $this;
    }

    /**
     * Get carriageBtoC
     *
     * @return float 
     */
    public function getCarriageBtoC()
    {
        return $this->carriageBtoC;
    }

   

    /**
     * Set email
     *
     * @param string $email
     * @return Brand
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set lang
     *
     * @param string $lang
     * @return Brand
     */
    public function setLang($lang)
    {
        $this->lang = $lang;

        return $this;
    }

    /**
     * Get lang
     *
     * @return string 
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * Set isInCatalog
     *
     * @param boolean $isInCatalog
     * @return Brand
     */
    public function setIsInCatalog($isInCatalog)
    {
        $this->isInCatalog = $isInCatalog;

        return $this;
    }

    /**
     * Get isInCatalog
     *
     * @return boolean 
     */
    public function getIsInCatalog()
    {
        return $this->isInCatalog;
    }
}
