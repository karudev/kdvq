<?php

namespace Sf\AdminBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Translatable\Translatable;

use Symfony\Component\Filesystem\Filesystem;

/**
 * Realization
 *
 * @ORM\Table(name="realization")
 * @ORM\Entity(repositoryClass="Sf\AdminBundle\Entity\RealizationRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Realization implements Translatable
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     * @Gedmo\Translatable
     * @ORM\Column(name="title", type="string", length=128)
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name="customer_type", type="string", length=255)
     */
    private $type;

    /**
     * @var texte
     * @Gedmo\Translatable
     * @ORM\Column(name="description", type="text", nullable=true)
     */
    private $description;


    /**
     * @var string
     * @Gedmo\Translatable
     * @ORM\Column(name="subtitle", type="string", length=128)
     */
    private $subtitle;
    /**
     * @var string
     *
     * @ORM\Column(name="website", type="string", length=128)
     */
    private $website;

    /** @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime")
     */
    private $createdAt;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="updated_at", type="datetime")
     */
    private $updatedAt;

    /**
     * @ORM\ManyToOne(targetEntity="Customer")
     */
    private $customer;

    /**
    * @var string
    *
    * @ORM\Column(name="picture", type="string", length=255, nullable=true)
    */
    private $picture;

    /**
     *
     * @Assert\Image(maxSize="6000000")
     */
    private $pictureFile;

    /**
    * @var string
   * @Gedmo\Slug(handlers={
   *      @Gedmo\SlugHandler(class="Gedmo\Sluggable\Handler\RelativeSlugHandler", options={
   *          @Gedmo\SlugHandlerOption(name="relationField", value="customer"),
   *          @Gedmo\SlugHandlerOption(name="relationSlugField", value="slug"),
   *          @Gedmo\SlugHandlerOption(name="separator", value="-")
   *      })
   * }, fields={"title"})
    * @ORM\Column(name="slug", unique=true, length=255)
    */
    private $slug;

    /**
   * @ORM\OneToMany(targetEntity="CarrouselStep", mappedBy="CarrouselStep")
   */
  private $carrouselStep;


    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Realization
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->customer = new \Doctrine\Common\Collections\ArrayCollection();
    }


    public function __toString(){
      return $this->title;
    }

    /**
     * Add customer
     *
     * @param \Sf\AdminBundle\Entity\Customer $customer
     * @return Realization
     */
    public function addCustomer(\Sf\AdminBundle\Entity\Customer $customer)
    {
        $this->customer[] = $customer;

        return $this;
    }

    /**
     * Remove customer
     *
     * @param \Sf\AdminBundle\Entity\Customer $customer
     */
    public function removeCustomer(\Sf\AdminBundle\Entity\Customer $customer)
    {
        $this->customer->removeElement($customer);
    }

    /**
     * Get customer
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Set customer
     *
     * @param \Sf\AdminBundle\Entity\Customer $customer
     * @return Realization
     */
    public function setCustomer(\Sf\AdminBundle\Entity\Customer $customer = null)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return Realization
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set nbCustomer
     *
     * @param integer $nbCustomer
     * @return Realization
     */
    public function setNbCustomer($nbCustomer)
    {
        $this->nbCustomer = $nbCustomer;

        return $this;
    }

    /**
     * Get nbCustomer
     *
     * @return integer
     */
    public function getNbCustomer()
    {
        return $this->nbCustomer;
    }

    /**
     * Set realizationSlug
     *
     * @param string $realizationSlug
     * @return Realization
     */
    public function setRealizationSlug($realizationSlug)
    {
        $this->realizationSlug = $realizationSlug;

        return $this;
    }

    /**
     * Get realizationSlug
     *
     * @return string
     */
    public function getRealizationSlug()
    {
        return $this->realizationSlug;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Realization
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set type
     *
     * @param string $type
     * @return Realization
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Realization
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set subtitle
     *
     * @param string $subtitle
     * @return Realization
     */
    public function setSubtitle($subtitle)
    {
        $this->subtitle = $subtitle;

        return $this;
    }

    /**
     * Get subtitle
     *
     * @return string
     */
    public function getSubtitle()
    {
        return $this->subtitle;
    }

    /**
     * Set website
     *
     * @param string $website
     * @return Realization
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Get website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Realization
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return Realization
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set picture
     *
     * @param string $picture
     * @return Realization
     */
    public function setPicture($picture)
    {
        $this->picture = $picture;

        return $this;
    }

    /**
     * Get picture
     *
     * @return string
     */
    public function getPicture()
    {
        return $this->picture;
    }


    /**
     * Set pictureFile
     *
     * @param object $pictureFile
     */
    public function setPictureFile($pictureFile)
    {
        $this->pictureFile = $pictureFile;
    }

    /**
     * Get pictureFile
     *
     * @return object
     */
    public function getPictureFile()
    {
        return $this->pictureFile;
    }

    /**
      * @ORM\PrePersist()
      * @ORM\PreUpdate()
      */
     public function preUpload()
     {
         if (null !== $this->pictureFile) {
          // $fs = new Filesystem();
          // if($fs->exists($this->getAbsolutePath())){
          //    unlink($this->picture);
          //  }
             $this->picture = uniqid().'.'.$this->pictureFile->guessExtension();
         }
     }

/**
 * @ORM\PrePersist
 */
public function CcreatedDateTime() {
    $this->createdAt = new \DateTime();
    $this->updatedAt = new \DateTime();
}

/**
 * @ORM\PreUpdate()
 */
public function updatedDateTime(){
  $this->updatedAt = new \dateTime();
}

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {
        if (null === $this->pictureFile) {
            return;
        }

        $this->pictureFile->move($this->getUploadRootDir(), $this->picture);
        unset($this->pictureFile);
    }

    /**
     * @ORM\PostRemove()
     */
    public function removeUpload()
    {
        if ($pictureFile = $this->getAbsolutePath()) {
          $fs = new Filesystem();
          if($fs->exists($this->getAbsolutePath())){
            unlink($pictureFile);
          }
        }
    }

    public function getAbsolutePath()
    {
        return null === $this->picture ? null : $this->getUploadRootDir().'/'.$this->picture;
    }

    public function getWebPath()
    {
        return null === $this->picture ? null : $this->getUploadDir().'/'.$this->picture;
    }

    protected function getUploadRootDir()
    {
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
        return 'uploads/realization';
    }


    /**
     * Set carrouselStep
     *
     * @param \Sf\AdminBundle\Entity\CarrouselStep $carrouselStep
     * @return Realization
     */
    public function setCarrouselStep(\Sf\AdminBundle\Entity\CarrouselStep $carrouselStep = null)
    {
        $this->carrouselStep = $carrouselStep;

        return $this;
    }

    /**
     * Get carrouselStep
     *
     * @return \Sf\AdminBundle\Entity\CarrouselStep
     */
    public function getCarrouselStep()
    {
        return $this->carrouselStep;
    }

    /**
     * Add carrouselStep
     *
     * @param \Sf\AdminBundle\Entity\CarrouselStep $carrouselStep
     * @return Realization
     */
    public function addCarrouselStep(\Sf\AdminBundle\Entity\CarrouselStep $carrouselStep)
    {
        $this->carrouselStep[] = $carrouselStep;

        return $this;
    }

    /**
     * Remove carrouselStep
     *
     * @param \Sf\AdminBundle\Entity\CarrouselStep $carrouselStep
     */
    public function removeCarrouselStep(\Sf\AdminBundle\Entity\CarrouselStep $carrouselStep)
    {
        $this->carrouselStep->removeElement($carrouselStep);
    }
}
