<?php

namespace Sf\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Sf\AdminBundle\Entity\Category;
use Sf\AdminBundle\Entity\Product;

/**
 * BrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository {

    public function findOneBySlug($slug) {
        return $this->createQueryBuilder('e')
                        ->where('e.slug =:slug')
                        ->andWhere('e.deleted = false')
                        ->setParameter('slug', $slug)
                        ->getQuery()
                        ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
                        ->getSingleResult();
    }
    
    public function getForSlideShow(){
        return $this->createQueryBuilder('e')
                ->where('e.active = true')
                ->andWhere('e.deleted = false')
                ->andWhere('e.hdPictureUrl is not null')
                ->orderBy('e.updatedAt', 'desc')
                ->setMaxResults(10)
                ->getQuery()
                ->getResult();
        
      
        
    }
    
    public function countByParentCategory(Category $category,Product $productToExclude){
       $data = $this->createQueryBuilder('e')
                ->select('count(e.id) as nb')
                ->innerJoin('e.category', 'c')
                ->where('c.category =:category')
                ->andWhere('e.active = true')
                ->andWhere('e.deleted = false')
                ->andWhere('e.id !=:product')
                ->setParameter('product', $productToExclude)
                ->setParameter('category', $category->getId())
                ->getQuery()
                ->getSingleResult();
      
       return (int)$data['nb'];
               
    }
    
     public function findByParentCategory(Category $category,Product $productToExclude,$maxResult = 3, $total){
    
         
        /* $t = ($total+1);
         print_r($t); die();
        */
         if($total <= $maxResult ){ 
            $first = 0;
             
         }else{
             $first = rand(0,$total-$maxResult);
         }
     
        
        return $this->createQueryBuilder('e')
                ->innerJoin('e.category', 'c')
                ->where('c.category =:category')
                ->andWhere('e.active = true')
                ->andWhere('e.deleted = false')
                ->andWhere('e.id !=:product')
                ->setParameter('product', $productToExclude)
                ->setParameter('category', $category)
                ->setFirstResult($first)
                ->setMaxResults($maxResult)
                ->getQuery()
                ->getResult();
    }

}
